import streamlit as st
import google.generativeai as genai
import numpy as np

api_key = "AIzaSyA2eHaMYGf4-pM92oLroLYojBOfgMWlbmY"
genai.configure(api_key=api_key)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏û‡πà‡∏¢‡∏¥‡∏õ‡∏ã‡∏µ
tarot_deck = [
    "The Fool", "The Magician", "The High Priestess", "The Empress",
    "The Emperor", "The Hierophant", "The Lovers", "The Chariot",
    "Strength", "The Hermit", "Wheel of Fortune", "Justice",
    "The Hanged Man", "Death", "Temperance", "The Devil",
    "The Tower", "The Star", "The Moon", "The Sun",
    "Judgment", "The World"
]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà
def draw_tarot_card(seed_number, user_seed):
    combined_seed = seed_number + user_seed
    np.random.seed(combined_seed)
    return np.random.choice(tarot_deck)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ agent ‡∏ï‡πà‡∏≤‡∏á ‡πÜ
def configure_agent(model_name):
    try:
        return genai.GenerativeModel(model_name)
    except Exception as e:
        st.error(f"Error configuring model {model_name}: {e}")
        return None

# ‡πÅ‡∏≠‡∏õ‡∏´‡∏•‡∏±‡∏Å
def Adinaw():
    st.title("üîÆ Adinaw Horoscopes")
    
    # ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    if "greeted" not in st.session_state:
        st.session_state.greeted = False
    if "current_topic" not in st.session_state:
        st.session_state.current_topic = None
    if "expect_random_number" not in st.session_state:
        st.session_state.expect_random_number = False

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡πÄ‡∏à‡∏ô‡∏ï‡πå
    tarot_agent = configure_agent("gemini-pro")
    conversation_agent = configure_agent("gemini-pro")

    if not tarot_agent or not conversation_agent:
        return

    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    for role, message in st.session_state.chat_history:
        st.chat_message(role).markdown(message)

    # ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    if not st.session_state.greeted:
        greeting_prompt = """
        ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏û‡πà‡∏¢‡∏¥‡∏õ‡∏ã‡∏µ ‡∏ä‡∏∑‡πà‡∏≠ Adinaw ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏•‡∏±‡∏á ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏°‡∏µ‡∏°‡∏ô‡∏ï‡πå‡∏Ç‡∏•‡∏±‡∏á
        ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠ ‡πÅ‡∏Å‡πà user (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏Å user) 
        ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Ø‡∏•‡∏Ø ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏≠‡∏°‡∏Ç‡∏°‡∏±‡∏á‡πÄ‡∏ß‡∏ó‡∏¢‡πå ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤
        """
        try:
            response = tarot_agent.generate_content(greeting_prompt)
            bot_response = response.text
            st.session_state.chat_history.append(("assistant", bot_response))
            st.chat_message("assistant").markdown(bot_response)
            st.session_state.greeted = True
        except Exception as e:
            st.error(f"Error generating AI greeting: {e}")

    # ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user_input = st.chat_input("‡πÉ‡∏™‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°... (exit ‡∏´‡∏≤‡∏Å‡πÄ‡∏à‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ñ‡∏≤‡∏°)")
    if user_input:
        if user_input.lower() == "exit":
            st.session_state.current_topic = None
            st.session_state.expect_random_number = False
            st.session_state.chat_history.append(("user", user_input))
            st.chat_message("user").markdown(user_input)
            st.chat_message("assistant").markdown("‡πÄ‡∏à‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏á‡∏±‡πâ‡∏ô‡∏£‡∏∂ ‡∏á‡∏±‡πâ‡∏ô‡∏°‡∏≤‡∏•‡∏≠‡∏á‡∏î‡∏π‡∏Å‡∏±‡∏ô...")
            return

        st.session_state.chat_history.append(("user", user_input))
        st.chat_message("user").markdown(user_input)

        if st.session_state.current_topic is None:
            st.session_state.current_topic = user_input
            st.session_state.expect_random_number = True
            st.chat_message("assistant").markdown(
                "‡πÑ‡∏´‡∏ô‡∏•‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏ä‡∏≠‡∏ö‡∏°‡∏≤‡∏ã‡∏±‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß ‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ"
            )
        elif st.session_state.expect_random_number:
            try:
                user_seed = int(user_input)
                seed_number = sum(ord(char) for char in st.session_state.current_topic)
                drawn_card = draw_tarot_card(seed_number, user_seed)
                tarot_prompt = f"""
                ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°: {st.session_state.current_topic}
                ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠: {drawn_card}
                ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏õ‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏û‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß ‡πÅ‡∏õ‡∏•‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÑ‡∏ú‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏≤‡∏ß‡∏ó‡∏µ‡πà user
                ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏° ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
                ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏≠‡∏°‡∏Ç‡∏°‡∏±‡∏á‡πÄ‡∏ß‡∏ó‡∏¢‡πå ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤
                """
                response = tarot_agent.generate_content(tarot_prompt)
                bot_response = f"üîÆ ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ **{drawn_card}**\n\n‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: {response.text}"
                st.session_state.chat_history.append(("assistant", bot_response))
                st.chat_message("assistant").markdown(bot_response)
                st.session_state.expect_random_number = False
            except ValueError:
                st.chat_message("assistant").markdown("‡∏Ç‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
        else:
            conversation_prompt = f"""
            ‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: "{st.session_state.current_topic}"\n
            ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤: {user_input}
            ‡πÇ‡∏õ‡∏£‡∏î‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≤‡∏á‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠
            ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏à‡∏≠‡∏°‡∏Ç‡∏°‡∏±‡∏á‡πÄ‡∏ß‡∏ó‡∏¢‡πå ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏à‡πâ‡∏≤
            """
            response = conversation_agent.generate_content(conversation_prompt)
            bot_response = response.text.strip()
            st.session_state.chat_history.append(("assistant", bot_response))
            st.chat_message("assistant").markdown(bot_response)